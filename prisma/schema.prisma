// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  clerkUserId String @unique
  email     String   @unique
  name      String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  communities Community[]
  members Member[]
  posts Post[]
  comments Comment[]
  likes Like[]
  activities Activity[]
  receivedActivities Activity[] @relation("ReceivedActivities")
}

model Hobby {
  id        String   @id @default(uuid())
  name      String
  description String?
  tags String[]
  emoji     String?
  difficulty String?
  timeCommitment String?
  costRange String?
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  communities Community[]
}

model Member {
  id        String   @id @default(uuid())
  userId String
  communityId String
  role String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  community Community @relation(fields: [communityId], references: [id])
}

model Community {
  id        String   @id @default(uuid())
  name      String
  description String?
  members Member[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  users User[]
  hobbyId String
  hobby Hobby @relation(fields: [hobbyId], references: [id])
  posts Post[]
  activities Activity[]
}

model Post {
  id          String      @id @default(uuid())
  title       String
  content     String      @db.Text
  published   Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  authorId    String      // Clerk User ID
  author      User        @relation(fields: [authorId], references: [clerkUserId], onDelete: Cascade)
  
  communityId String
  community   Community   @relation(fields: [communityId], references: [id], onDelete: Cascade)
  
  comments    Comment[]
  likes       Like[]
  tags        String[]
  activities Activity[]
}

model Comment {
  id          String      @id @default(uuid())
  content     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  authorId    String      // Clerk User ID
  author      User        @relation(fields: [authorId], references: [clerkUserId], onDelete: Cascade)
  
  postId      String
  post        Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  
  userId      String      // Clerk User ID
  user        User        @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  
  postId      String
  post        Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId]) // A user can only like a post once
}

model Activity {
  id          String      @id @default(uuid())
  type        String      // e.g., "post_created", "comment_created", "user_joined"
  content     String?     // Optional content description
  createdAt   DateTime    @default(now())
  isRead      Boolean     @default(false)  // Track if the activity has been read
  
  // Relations
  userId      String?     // The user who performed the action (optional for system activities)
  user        User?       @relation(fields: [userId], references: [clerkUserId], onDelete: SetNull)
  
  communityId String?     // Related community (optional)
  community   Community?  @relation(fields: [communityId], references: [id], onDelete: Cascade)
  
  postId      String?     // Related post (optional)
  post        Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // For efficient querying
  recipientId String?     // For targeted activities (e.g., mentions)
  recipient   User?       @relation("ReceivedActivities", fields: [recipientId], references: [clerkUserId], onDelete: SetNull)
  
  // Metadata
  metadata    Json?       // Additional data specific to activity type
}